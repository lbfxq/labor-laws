/** *  Created by IntelliJ IDEA. *  User: plentx@me.com * Date: 2018/10/8 * Time: 21:08 **/  //  // const xmlHttpRequest = function (params) {  //   let default_params = {  //     url: '',  //     method: 'get',  //     data: {},  //   }  //   Object.assign(default_params, params)  //   let httpRequest  //   if (window.XMLHttpRequest) {// code for all new browsers  //     httpRequest = new XMLHttpRequest()  //   } else if (window.ActiveXObject) {// code for IE5 and IE6  //     httpRequest = new ActiveXObject('Microsoft.XMLHTTP')  //   }  //   httpRequest.open(default_params.method, default_params.url, true)  //   httpRequest.send(default_params.data)  //   httpRequest.onreadystatechange = function (data) {  //     console.log(data)  //   }  // }var $wacth = window.$wacth = (function () {    var q = {},    topics = {}, subUid = -1    //发布消息    q.publish = function (topic, args) {      if (!topics[topic]) {return}      var subs = topics[topic], len = subs.length      while (len--) {        subs[len].func(topic, args)      }      return this    }    //订阅事件    q.subscribe = function (topic, func) {      topics[topic] = topics[topic] ? topics[topic] : []      var token = (++subUid).toString()      topics[topic].push({        token: token,        func: func,      })      return token    }    return q    //取消订阅就不写了，遍历topics，然后通过保存前面返回token，删除指定元素  })()let ajaxNum = window.ajaxNum = 0$wacth.subscribe('ajaxNum', function (topics, data) {  // if(data == 0)page.setPath()})//// let ajaxDom = document.createElement('input')// ajaxDom.type='hidden'// ajaxDom.value=0// document.body.appendChild(ajaxDom)$.ajaxSetup({  xhrFields: {withCredentials: true},  beforeSend (response, request) {    $wacth.publish('ajaxNum', ajaxNum++)    $('#loading').show()    if (request.data) request.data = myx.jsonToString(myx.getSearch(request.data))  },  fail () {    console.log(arguments, 'fail')  },  success () {    // console.log(arguments)  },  complete () {    // ajaxDom.value -= 1    $wacth.publish('ajaxNum', ajaxNum--)  },  error () {    console.log(arguments, 'error')  },  dataFilter (data) {    // console.log(data,'dataFilter')    // if(typeof data.data != 'undefined' || typeof data.data != undefined ){    //   return data    // }else{    //   return data    // }    return data  },})const myx = window.myx = {  resTree: new Map(),  index: 0,  post (params) {    return $.post(params)    // let data = {}    // for (let [k, v] of Object.entries(params.data)) {    //   data[k] = encodeURI(v)    // }    // params.data = data    //let response = await $.post(params)    // if (response && ( response.code || response.code == 'success' ) ) {    //return Promise.resolve(response)    // } else {    // console.log(`响应结果：${response.responseText},响应状态：${response.status}`)    // }  }  ,  get (url, params) {    return $.get(url + myx.urlEncode(params))    /*if (url.indexOf('login/out') > -1) {*/    /* return new Promise((resolve, reject) => {       let response = await $.get(url + myx.urlEncode(params))       if (response && response.code == 'success') {         resolve(response)       } else {         reject(response)       }     })*/  }  ,  getJSON (params) {    return $.getJSON(params)    /*let response = await $.getJSON(params)    if (response) {      return Promise.resolve(response)    } else {      return Promise.reject(response)    }*/  }  ,  getSearch (url = location.search) {    var theRequest = new Object(), str = ''    if (url.indexOf('?') != -1) {      str = url.substr(1)    } else {      str = url    }    let strs = str.split('&')    for (var i = 0; i < strs.length; i++) {      theRequest[strs[i].split('=')[0]] = unescape(strs[i].split('=')[1])    }    return theRequest  }  ,  getHash (url = location.hash) {    return url.indexOf('#') != -1 ? url.substr(1) : url  }  ,  /**   *字符串转json   *   */  stringToJson (data) {    return JSON.parse(data)  }  ,  /**   *json转字符串   */  jsonToString (data) {    return JSON.stringify(data)  }  ,  /**   *map转换为json   */  mapToJson (map) {    return JSON.stringify(myx.strMapToObj(map))  }  ,  /**   *json转换为map   */  jsonToMap (jsonStr) {    return this.objToStrMap(JSON.parse(jsonStr))  }  ,  /**   *map转化为对象（map所有键都是字符串，可以将其转换为对象）   */  strMapToObj (strMap) {    let obj = Object.create(null)    for (let [k, v] of strMap) {      obj[k] = v    }    return obj  }  ,  /**   *对象转换为Map   */  objToStrMap (obj) {    let strMap = new Map()    for (let k of Object.keys(obj)) {      strMap.set(k, obj[k])    }    return strMap  }  ,  serializeArrayToMap (arr) {    if (!(arr instanceof Array) || arr.length <= 0) return    let map = new Map()    arr.map(item => {      map.set(item.name, item.value)    })    return map  },  serializeArrayToObj (arr) {    if (!(arr instanceof Array) || arr.length <= 0) return    let obj = {}    arr.map(item => {      obj[item.name] = encodeURI(item.value)    })    return obj  }  ,  urlEncode (param, key, encode) {    function encode (param, key, encode) {      if (param == null) return ''      var paramStr = ''      var t = typeof (param)      if (t == 'string' || t == 'number' || t == 'boolean') {        paramStr += '&' + key + '=' + ((encode == null || encode) ? encodeURIComponent(param) : param)      } else {        for (var i in param) {          var k = key == null ? i : key + (param instanceof Array ? '[' + i + ']' : '.' + i)          paramStr += encode(param[i], k, encode)        }      }      return paramStr    }    return encode(param, key, encode)  },  getDate (time) {    let year = new Date(time).getFullYear()    let month = new Date(time).getMonth()    let date = new Date(time).getDate()    month=month+1    month = month < 10 ? '0' + month : month    date = date < 10 ? '0' + date : date    return year + '年' + month + '月' + date + '日'  },  getCategoryTree (data) {    // console.log(data,myx.index++)    if (data.length > 0) {      for (let i = 0, len = data.length; i < len; i++) {        myx.resTree.set(String(data[i].id), data[i].name)        if (data[i].childs && data[i].childs.length > 0) {          myx.getCategoryTree(data[i].childs)        }      }    }  },  replace (str, before, after) {    var reg = new RegExp(before, 'g')    return str.replace(reg, after)  },  getId (params_id) {    if (categoryMap.child[params_id]) {      return {        level: 1,        id: params_id,        name: categoryMap[params_id],      }    } else {      // console.log(params_id,1)      for (let [id, v] of Object.entries(categoryMap.child)) {        // console.log(v,2)        for (let $v of Object.values(v)) {          // console.log(typeof params_id,'id')          // console.log(typeof $v.id,'$v.id')          // console.log(params_id,'id string')          // console.log($v.id,'$v.id number')          if ($v.id == params_id) {            return {              level: 2,              self_id: params_id,              self_name: $v.name,              parent_id: id,              parent_name: categoryMap[id],            }          }        }      }    }  },  loginStatus: false,  customMessage: function (params) {    this.initData = function (params) {      if (params.type) {        params.className = `alert-${params.type}`        params.type = `${params.type}:`      }      Object.assign(this.defalut_params, params)      return this.defalut_params    }    this.defalut_params = {      text: '',      className: 'alert-danger',      type: 'info:',      duration: 2000,    }    this.show = function (params) {      $('#message').removeClass('hide')      $('#message').html(template(tpl.message, this.initData(params)))      this.hide()    }    this.hide = function () {      setTimeout(function () {        $('#message').html('').addClass('hide')      }, this.defalut_params.duration)    }    this.show(params)  },  /**   * 验证邮箱地址   * @param email   * @returns {Boolean}   */  validateEmail (email) {    if (!email || email == '') {      return false    }    var pattern = /^([\.a-zA-Z0-9_-])+@([a-zA-Z0-9_-])+(\.[a-zA-Z0-9_-])+/    if (!pattern.test(email)) {      return false    } else {      return true    }  },  /**   * 滚动条位置   * @returns {number}   */  getScrollTop () {    var scrollTop = 0    if (document.documentElement && document.documentElement.scrollTop) {      scrollTop = document.documentElement.scrollTop    } else if (document.body) {      scrollTop = document.body.scrollTop    }    return scrollTop  },  /**   * 窗口实际高度   * @returns {number}   */  getClientHeight () {    var clientHeight = 0    if (document.body.clientHeight && document.documentElement.clientHeight) {      var clientHeight = (document.body.clientHeight < document.documentElement.clientHeight) ? document.body.clientHeight : document.documentElement.clientHeight    } else {      var clientHeight = (document.body.clientHeight > document.documentElement.clientHeight) ? document.body.clientHeight : document.documentElement.clientHeight    }    return clientHeight  },  /**   * doc 实际高度   * @returns {number}   */  getScrollHeight () {    return Math.max(document.body.scrollHeight, document.documentElement.scrollHeight)  }}myx.resTree.set('home', 'トップページ ')myx.resTree.set('pay', '会員を開通する')myx.resTree.set('search', '検索結果')myx.resTree.set('form_Consultation', 'お問い合わせ')myx.resTree.set('guide', '会員サービスのご案内')myx.resTree.set('business', '業務分野')myx.resTree.set('requisition', '「中国労働法会員サービス」お申込書')